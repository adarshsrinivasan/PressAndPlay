// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: court.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourtClient is the client API for Court service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourtClient interface {
	// GetCourt - takes CourtModel with only id populated as input and returns complete CourtModel
	GetCourt(ctx context.Context, in *CourtModel, opts ...grpc.CallOption) (*CourtModel, error)
}

type courtClient struct {
	cc grpc.ClientConnInterface
}

func NewCourtClient(cc grpc.ClientConnInterface) CourtClient {
	return &courtClient{cc}
}

func (c *courtClient) GetCourt(ctx context.Context, in *CourtModel, opts ...grpc.CallOption) (*CourtModel, error) {
	out := new(CourtModel)
	err := c.cc.Invoke(ctx, "/Court/GetCourt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourtServer is the server API for Court service.
// All implementations must embed UnimplementedCourtServer
// for forward compatibility
type CourtServer interface {
	// GetCourt - takes CourtModel with only id populated as input and returns complete CourtModel
	GetCourt(context.Context, *CourtModel) (*CourtModel, error)
	mustEmbedUnimplementedCourtServer()
}

// UnimplementedCourtServer must be embedded to have forward compatible implementations.
type UnimplementedCourtServer struct {
}

func (UnimplementedCourtServer) GetCourt(context.Context, *CourtModel) (*CourtModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourt not implemented")
}
func (UnimplementedCourtServer) mustEmbedUnimplementedCourtServer() {}

// UnsafeCourtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourtServer will
// result in compilation errors.
type UnsafeCourtServer interface {
	mustEmbedUnimplementedCourtServer()
}

func RegisterCourtServer(s grpc.ServiceRegistrar, srv CourtServer) {
	s.RegisterService(&Court_ServiceDesc, srv)
}

func _Court_GetCourt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourtModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServer).GetCourt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Court/GetCourt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServer).GetCourt(ctx, req.(*CourtModel))
	}
	return interceptor(ctx, in, info, handler)
}

// Court_ServiceDesc is the grpc.ServiceDesc for Court service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Court_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Court",
	HandlerType: (*CourtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourt",
			Handler:    _Court_GetCourt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "court.proto",
}
